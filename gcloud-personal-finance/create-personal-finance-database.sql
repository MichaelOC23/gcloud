
                                    CREATE OR REPLACE FUNCTION update_timestamp_user() 
                                    RETURNS TRIGGER AS $$ BEGIN NEW.updatedat := CURRENT_TIMESTAMP;
                                    NEW.updatedby := CURRENT_USER;
                                    RETURN NEW;
                                    END;
                                    $$ LANGUAGE plpgsql;;

DROP TABLE IF EXISTS transaction;;

CREATE TABLE TRANSACTION (ID UUID PRIMARY KEY DEFAULT GEN_RANDOM_UUID(), CREATEDAT TIMESTAMP DEFAULT CURRENT_TIMESTAMP, CREATEDBYUSER TEXT DEFAULT CURRENT_USER, UPDATEDDATE TIMESTAMP, UPDATEDBYUSER TEXT, ISVALID BOOLEAN, ENTITLEMENTID INTEGER, FILESOURCE TEXT, FILESHAPE TEXT, TRANSACTIONDATE DATE, UNIQUEBUSINESSKEY TEXT, INSTITUTIONTRANSACTIONID TEXT, ACCOUNTTYPE TEXT, ACCOUNTNAME TEXT, ACCOUNTNUMBER TEXT, INSTITUTIONNAME TEXT, MERCHANTNAME TEXT, MERCHANTCATEGORY TEXT, MERCHANTSTREETADDRESS TEXT, MERCHANTCITY TEXT, MERCHANTSTATE TEXT, MERCHANTZIP TEXT, MERCHANTCOUNTRY TEXT, TRANNAME TEXT, TRANNAME2 TEXT, AMOUNT DECIMAL(10, 2), TRANSACTIONTYPE TEXT, CATEGORYTAG TEXT, CASHFLOWMULTIPLIER DECIMAL(10, 2), CATEGORYALT TEXT, CHECKNUMBER TEXT, NOTE TEXT, IGNORE BOOLEAN, TAXDEDUCTIBLE BOOLEAN);;

DROP TRIGGER IF EXISTS set_update_fields ON transaction;;

CREATE TRIGGER set_update_fields BEFORE UPDATE ON transaction FOR EACH ROW EXECUTE FUNCTION update_timestamp_user();;

DROP TABLE IF EXISTS categorymap;;

CREATE TABLE CATEGORYMAP (ID UUID PRIMARY KEY DEFAULT GEN_RANDOM_UUID(), CREATEDAT TIMESTAMP DEFAULT CURRENT_TIMESTAMP, CREATEDBYUSER TEXT DEFAULT CURRENT_USER, UPDATEDDATE TIMESTAMP, UPDATEDBYUSER TEXT, ISVALID BOOLEAN, ENTITLEMENTID INTEGER, CATEGORYTAG TEXT, MAPTYPE TEXT, TRANSACTIONDESCRIPTIONCONTAINS TEXT, AMOUNTISEQUALTO DECIMAL(10, 2), AMOUNTISGREATERTHAN DECIMAL(10, 2), AMOUNTISLESSTHAN DECIMAL(10, 2));;

DROP TRIGGER IF EXISTS set_update_fields ON categorymap;;

CREATE TRIGGER set_update_fields BEFORE UPDATE ON categorymap FOR EACH ROW EXECUTE FUNCTION update_timestamp_user();;

DROP TABLE IF EXISTS manualupdates;;

CREATE TABLE MANUALUPDATES (ID UUID PRIMARY KEY DEFAULT GEN_RANDOM_UUID(), CREATEDAT TIMESTAMP DEFAULT CURRENT_TIMESTAMP, CREATEDBYUSER TEXT DEFAULT CURRENT_USER, UPDATEDDATE TIMESTAMP, UPDATEDBYUSER TEXT, ISVALID BOOLEAN, ENTITLEMENTID INTEGER, UNIQUEBUSINESSKEY TEXT, FIELDTOUPDATE TEXT, NEWVALUE TEXT);;

DROP TRIGGER IF EXISTS set_update_fields ON manualupdates;;

CREATE TRIGGER set_update_fields BEFORE UPDATE ON manualupdates FOR EACH ROW EXECUTE FUNCTION update_timestamp_user();;

DROP TABLE IF EXISTS category;;

CREATE TABLE CATEGORY (ID UUID PRIMARY KEY DEFAULT GEN_RANDOM_UUID(), CREATEDAT TIMESTAMP DEFAULT CURRENT_TIMESTAMP, CREATEDBYUSER TEXT DEFAULT CURRENT_USER, UPDATEDDATE TIMESTAMP, UPDATEDBYUSER TEXT, ISVALID BOOLEAN, ENTITLEMENTID INTEGER, CATEGORYTAG TEXT, CATEGORYPARENT TEXT, CATEGORYTYPE TEXT);;

DROP TRIGGER IF EXISTS set_update_fields ON category;;

CREATE TRIGGER set_update_fields BEFORE UPDATE ON category FOR EACH ROW EXECUTE FUNCTION update_timestamp_user();